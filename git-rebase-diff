#!/bin/sh

while test $# -gt 0; do
	case $1 in
	-d|--debug)
			shift
			DEBUG=1
		;;
	--)
		shift
		break
		;;
	*)
		>&2 printf "unknown option $1; use -- to forward args to range-diff.\n"
		exit 1
		;;
	esac
done

OLD_HEAD="@{u}"
NEW_HEAD="@"

SHOWING_PREVIOUS=0

if [ "$(git rev-parse "$OLD_HEAD")" == "$(git rev-parse "$NEW_HEAD")" ]; then
	# OLD_HEAD == NEW_HEAD, thus nothing will be different.
	# thus, instead, show the previous range diff.
	SHOWING_PREVIOUS=1
	OLD_HEAD="@{u}@{1}"
fi

MERGE_BASE="$(git merge-base "$OLD_HEAD" "$NEW_HEAD")"

RANGE1="${MERGE_BASE}..${OLD_HEAD}" 
RANGE2="${MERGE_BASE}..${NEW_HEAD}"

test -n "$DEBUG" && {
	>&2 echo "comparing "$MERGE_BASE" "$OLD_HEAD" "$NEW_HEAD""
}

test -z "$GIT_REBASE_DIFF_NOEXEC" && {
	git range-diff $MERGE_BASE $OLD_HEAD $NEW_HEAD
}

test "$SHOWING_PREVIOUS" -eq 1 && {
	>&2 printf "\nold == new, thus showing previous rebase-diff instead.\n"
}

