#!/bin/sh

DEFAULT_INIT_BRANCH="$(git config --get init.defaultBranch || printf "master")"

# configurable via env variables:
REMOTE="${GIT_REBASE_DIFF_DEFAULT_REMOTE:-origin}" 
PARENT_BRANCH="${GIT_REBASE_DIFF_DEFAULT_PARENT:-${DEFAULT_INIT_BRANCH}}"

DEBUG=0

while test $# -gt 0; do
	case $1 in
	-r|--remote)
		shift
		REMOTE="$1"
		shift
		;;
	-p|--parent|--parent-branch)
		shift
		PARENT_BRANCH="$1"
		shift
		;;
	-d|--debug)
			shift
			DEBUG=1
		;;
	*)
		>&2 printf "\nunknown option $1\n\n"
		exit 1
		;;
	esac
done

# could be configurable w/ a CLI option, but i don't think anyone needs that?
BRANCH="$(git branch --show-current)"

REMOTE_BRANCH="$REMOTE/$BRANCH"

# find what was the old version of the branch rebased onto.
# old version = $REMOTE_BRANCH
# this is why we expect that you did _not_ push after the rebase yet.
OLD_BASE="$(git merge-base $BRANCH $REMOTE_BRANCH)"

NEW_BASE="$REMOTE/$PARENT_BRANCH"

#echo "comparing "${OLD_BASE}..${REMOTE_BRANCH}" "${NEW_BASE}..${BRANCH}""
#echo "comparing "$(git rev-parse $OLD_BASE)..$(git rev-parse $REMOTE_BRANCH)" "$(git rev-parse $NEW_BASE)..$(git rev-parse $BRANCH)""

RANGE1="${OLD_BASE}..${REMOTE_BRANCH}" 
RANGE2="${NEW_BASE}..${BRANCH}"

test "$DEBUG" -eq 1 && {
	printf "range1: $RANGE1\nrange2: $RANGE2\n\n"
}

git range-diff "$RANGE1" "$RANGE2" $*

